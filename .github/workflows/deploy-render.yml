name: Deploy to Render

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint:check
      
    - name: Build application
      run: npm run build
      
    - name: Test build output
      run: |
        # V√©rifier que le build a cr√©√© les fichiers n√©cessaires
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          exit 1
        fi
        
        # V√©rifier la taille du bundle (optimisation √©co-conception)
        BUNDLE_SIZE=$(du -sh dist | cut -f1)
        echo "üì¶ Bundle size: $BUNDLE_SIZE"
        
        # V√©rifier que les assets sont pr√©sents
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build failed: index.html not found"
          exit 1
        fi
        
        echo "‚úÖ Build successful"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          backend/
          package.json
          package-lock.json
        retention-days: 7

  deploy-to-render:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
        
    - name: Deploy to Render
      run: |
        echo "üöÄ Deploying to Render..."
        
        # D√©clencher un nouveau d√©ploiement via l'API Render
        if [ -n "${{ secrets.RENDER_SERVICE_ID }}" ] && [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -d '{"clearCache": "do_not_clear"}' || echo "‚ö†Ô∏è Deploy trigger failed, but continuing..."
        else
          echo "‚ÑπÔ∏è Render secrets not configured, skipping deployment"
        fi
        
    - name: Verify deployment
      run: |
        # Attendre que le d√©ploiement soit termin√©
        sleep 30
        
        # V√©rifier que l'application r√©pond
        if [ -n "${{ secrets.RENDER_URL }}" ]; then
          echo "üîç Checking deployment at ${{ secrets.RENDER_URL }}"
          
          # Test de connectivit√©
          if curl -f -s "${{ secrets.RENDER_URL }}/api/server" > /dev/null; then
            echo "‚úÖ API endpoint responding"
          else
            echo "‚ö†Ô∏è API endpoint not responding"
          fi
          
          # Test de la page principale
          if curl -f -s "${{ secrets.RENDER_URL }}" > /dev/null; then
            echo "‚úÖ Main page responding"
          else
            echo "‚ö†Ô∏è Main page not responding"
          fi
        else
          echo "‚ÑπÔ∏è RENDER_URL not configured, skipping verification"
        fi

  eco-performance-check:
    needs: deploy-to-render
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install ecoindex-cli
      run: npm install -g ecoindex-cli
      
    - name: Run eco performance check
      run: |
        echo "üå± Running eco performance check on deployed application..."
        
        # Attendre que l'application soit compl√®tement d√©ploy√©e
        sleep 60
        
        # Ex√©cuter ecoindex sur l'application d√©ploy√©e
        ecoindex-cli "${{ secrets.RENDER_URL }}" --output json > eco-results-production.json
        
        # Extraire et afficher les r√©sultats
        GRADE=$(cat eco-results-production.json | jq -r '.grade')
        SCORE=$(cat eco-results-production.json | jq -r '.score')
        DOM_ELEMENTS=$(cat eco-results-production.json | jq -r '.dom_elements')
        REQUESTS=$(cat eco-results-production.json | jq -r '.requests')
        SIZE=$(cat eco-results-production.json | jq -r '.size')
        
        echo "üìä Eco Performance Results:"
        echo "  Grade: $GRADE"
        echo "  Score: $SCORE/100"
        echo "  DOM Elements: $DOM_ELEMENTS"
        echo "  Requests: $REQUESTS"
        echo "  Size: $SIZE KB"
        
        # V√©rifier que l'application respecte les crit√®res √©co-conception
        if [ "$SCORE" -ge 85 ]; then
          echo "‚úÖ Excellent score √©co-conception: $SCORE/100"
        elif [ "$SCORE" -ge 70 ]; then
          echo "‚úÖ Bon score √©co-conception: $SCORE/100"
        elif [ "$SCORE" -ge 50 ]; then
          echo "‚ö†Ô∏è Score √©co-conception acceptable: $SCORE/100"
        else
          echo "‚ùå Score √©co-conception √† am√©liorer: $SCORE/100"
          exit 1
        fi
        
    - name: Upload eco results
      uses: actions/upload-artifact@v4
      with:
        name: eco-results-production
        path: eco-results-production.json
        retention-days: 30
      if: always()

  notify-deployment:
    needs: [deploy-to-render, eco-performance-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Deployment URL: ${{ secrets.RENDER_URL }}"
        
        if [ "${{ needs.deploy-to-render.result }}" == "success" ]; then
          echo "‚úÖ Deploy: SUCCESS"
        else
          echo "‚ùå Deploy: FAILED"
        fi
        
        if [ "${{ needs.eco-performance-check.result }}" == "success" ]; then
          echo "‚úÖ Eco Check: SUCCESS"
        elif [ "${{ needs.eco-performance-check.result }}" == "skipped" ]; then
          echo "‚è≠Ô∏è Eco Check: SKIPPED"
        else
          echo "‚ùå Eco Check: FAILED"
        fi 